import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Max_temp {
    public static class TemperatureMapper
        extends Mapper<Object, Text, Text, IntWritable>{

        private Text year = new Text();
        private IntWritable temperature = new IntWritable();

        public void map(Object key, Text value, Context context
                        ) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            
            if (itr.hasMoreTokens()) {
                String yearString = itr.nextToken();
                String temperatureString = itr.nextToken();
             
                try {
                    year.set(yearString); 
                    temperature.set(Integer.parseInt(temperatureString)); 
                    context.write(year, temperature);
                } catch (NumberFormatException e) {
                    
                    System.err.println("Skipping invalid record: " + 
                    value.toString());
                }
            }
        }
    }
    
    public static class MaxTemperatureReducer
        extends Reducer<Text, IntWritable, Text, IntWritable> {

        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values,
                        Context context
                        ) throws IOException, InterruptedException {
            int maxTemp = Integer.MIN_VALUE;  
            for (IntWritable val : values) {
                maxTemp = Math.max(maxTemp, val.get());  
            }
            result.set(maxTemp);
            context.write(key, result);  
        }
    }
    
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Maximum Temperature");

        job.setJarByClass(Max_temp.class);
        
        job.setMapperClass(TemperatureMapper.class);
        job.setReducerClass(MaxTemperatureReducer.class);

        job.setOutputKeyClass(Text.class);  
        job.setOutputValueClass(IntWritable.class);  

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
