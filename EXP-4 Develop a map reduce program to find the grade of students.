import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class StudentGrades {

    public static class GradeMapper extends Mapper<Object, Text, Text, Text> {
        private Text studentName = new Text();
        private Text grade = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());

            if (itr.hasMoreTokens()) {
                String name = itr.nextToken();  // Student name
                String marksStr = itr.nextToken();  // Marks

                try {
                    int marks = Integer.parseInt(marksStr);
                    String gradeLetter;

                    if (marks >= 90) {
                        gradeLetter = "A";
                    } else if (marks >= 80) {
                        gradeLetter = "B";
                    } else if (marks >= 70) {
                        gradeLetter = "C";
                    } else if (marks >= 60) {
                        gradeLetter = "D";
                    } else {
                        gradeLetter = "F";
                    }

                    studentName.set(name);
                    grade.set(gradeLetter);
                    context.write(studentName, grade);

                } catch (NumberFormatException e) {
                    System.err.println("Skipping invalid record: " + value.toString());
                }
            }
        }
    }

    public static class GradeReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            for (Text val : values) {
                context.write(key, val); // Output (StudentName -> Grade)
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Student Grades Calculation");

        job.setJarByClass(StudentGrades.class);
        job.setMapperClass(GradeMapper.class);
        job.setReducerClass(GradeReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
