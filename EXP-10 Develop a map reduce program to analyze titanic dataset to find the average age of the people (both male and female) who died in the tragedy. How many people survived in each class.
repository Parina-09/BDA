import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import java.io.IOException;

public class TitanicAnalysis {

    // Mapper Class
    public static class TitanicMapper extends Mapper<LongWritable, Text, Text, Text> {
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] fields = line.split(",");

            if (fields.length < 4 || fields[0].equals("Survived")) return;  // Skip header

            String survived = fields[0].trim();
            String pclass = fields[1].trim();
            String gender = fields[2].trim();
            String age = fields[3].trim();

            if (!age.isEmpty() && !age.equals("NA")) {
                if (survived.equals("0")) {
                    context.write(new Text("Deceased_" + gender), new Text(age));
                } else {
                    context.write(new Text("Survived_Class_" + pclass), new Text("1"));
                }
            }
        }
    }

    // Reducer Class
    public static class TitanicReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            int count = 0;
            double sum = 0.0;

            for (Text val : values) {
                try {
                    double num = Double.parseDouble(val.toString());
                    sum += num;
                    count++;
                } catch (NumberFormatException e) {
                    count++;
                }
            }

            if (key.toString().startsWith("Deceased")) {
                double avgAge = count == 0 ? 0 : sum / count;
                context.write(key, new Text("Average Age: " + avgAge));
            } else {
                context.write(key, new Text("Survivors: " + count));
            }
        }
    }

    // Driver Code
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Titanic Analysis");
        job.setJarByClass(TitanicAnalysis.class);
        job.setMapperClass(TitanicMapper.class);
        job.setReducerClass(TitanicReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
