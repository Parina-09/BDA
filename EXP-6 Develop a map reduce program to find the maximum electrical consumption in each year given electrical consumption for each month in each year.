import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import java.io.IOException;

public class MaxElectricConsumption {
    public static class ConsumptionMapper extends Mapper<Object, Text, Text, IntWritable> {
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String[] fields = value.toString().split("\\s+");
            if (fields.length == 3) {
                String year = fields[0];
                int consumption = Integer.parseInt(fields[2]);
                context.write(new Text(year), new IntWritable(consumption));
            }
        }
    }

    public static class ConsumptionReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int maxConsumption = Integer.MIN_VALUE;
            for (IntWritable val : values) {
                maxConsumption = Math.max(maxConsumption, val.get());
            }
            context.write(key, new IntWritable(maxConsumption));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "max electrical consumption");
        job.setJarByClass(MaxElectricConsumption.class);
        job.setMapperClass(ConsumptionMapper.class);
        job.setCombinerClass(ConsumptionReducer.class);
        job.setReducerClass(ConsumptionReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}â€ƒ
